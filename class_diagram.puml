@startuml OrderFulfillmentClassDiagram

' ==== Classes ====
class Clerk {
  + acknowledgeMessage()
}

class OrderEntryScreen {
  + displayOrderForm()
  + submitOrder()
  + showStatus()
}

class OrderController {
  + validateDataFormat()
  + processOrder()
  + cancelOrder()
}

class PurchaseOrder {
  - orderId: String
  - customerDetails: Customer
  - items: List<OrderItem>
  - status: String
  + create()
  + updateStatus()
}

class Customer {
  - name: String
  - address: String
  - phone: String
  - contactPerson: String
}

class OrderItem {
  - productId: String
  - quantity: int
  - totalPrice: float
}

class ProductCatalog {
  + getProductDetails(productIds: List<String>): ProductDetails[]
}

class ProductDetails {
  - type: String
  - title: String
  - handlingInstructions: String
}

class FinanceSystem {
  + checkCreditWorthiness(customer: Customer): boolean
}

class DeliverySystem {
  + scheduleDelivery(
    customer: Customer,
    orderId: String,
    items: List<ProductDeliveryInfo>
  ): String
}

class ProductDeliveryInfo {
  - productId: String
  - quantity: int
  - type: String
  - title: String
  - handlingInstructions: String
}

' ==== Relationships ====
Clerk --> OrderEntryScreen : "Interacts with"
OrderEntryScreen --> OrderController : "Submits to"
OrderController --> PurchaseOrder : "Manages"
OrderController --> FinanceSystem : "Validates credit"
OrderController --> ProductCatalog : "Retrieves details"
OrderController --> DeliverySystem : "Requests delivery"
PurchaseOrder "1" *-- "1" Customer : "Contains"
PurchaseOrder "1" *-- "*" OrderItem : "Has items"
ProductCatalog "1" --> "*" ProductDetails : "Provides"
DeliverySystem --> ProductDeliveryInfo : "Uses for shipping"

' ==== Notes ====
note top of OrderController
  Orchestrates the entire order flow:
  1. Validates data
  2. Checks credit
  3. Retrieves product info
  4. Initiates delivery
end note

note right of DeliverySystem
  Returns delivery status (e.g., "Scheduled", "Failed")
  to update PurchaseOrder.
end note

@enduml